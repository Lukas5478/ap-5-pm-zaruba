{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  getJoke(category, blacklistFlag, type) {\n    const baseUrl = \"https://v2.jokeapi.dev\";\n    if (blacklistFlag.length == 0) {\n      const url = `${baseUrl}/joke/${category}?type=${type}`;\n      return this.http.get(url);\n    } else {\n      const bFlag = blacklistFlag.join(\",\");\n      const url = `${baseUrl}/joke/${category}?blacklistFlag=${bFlag}&type=${type}`;\n      return this.http.get(url);\n    }\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,UAAU;EAErBC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EACV;EAENC,OAAO,CAACC,QAAgB,EAAEC,aAAuB,EAAEC,IAAY;IAC3D,MAAMC,OAAO,GAAG,wBAAwB;IAExC,IAAGF,aAAa,CAACG,MAAM,IAAI,CAAC,EAAC;MAC3B,MAAMC,GAAG,GAAI,GAAGF,OAAO,SAASH,QAAQ,SAASE,IAAI,EAAE;MACvD,OAAO,IAAI,CAACJ,IAAI,CAACQ,GAAG,CAAYD,GAAG,CAAC;KACrC,MAAM;MACL,MAAME,KAAK,GAAGN,aAAa,CAACO,IAAI,CAAC,GAAG,CAAC;MACrC,MAAMH,GAAG,GAAG,GAAGF,OAAO,SAASH,QAAQ,kBAAkBO,KAAK,SAASL,IAAI,EAAE;MAC7E,OAAO,IAAI,CAACJ,IAAI,CAACQ,GAAG,CAAYD,GAAG,CAAC;;EAG1C;;;mBAlBaT,UAAU;AAAA;;SAAVA,UAAU;EAAAa,SAAVb,UAAU;EAAAc,YAFT;AAAM","names":["ApiService","constructor","http","getJoke","category","blacklistFlag","type","baseUrl","length","url","get","bFlag","join","factory","providedIn"],"sourceRoot":"","sources":["D:\\ap-5-pm-zaruba\\src\\app\\services\\api\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from 'rxjs';\nimport {JokeParam} from \"../../models/joke.model\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\ngetJoke(category: string, blacklistFlag: string[], type: string): Observable<JokeParam>{\n    const baseUrl = \"https://v2.jokeapi.dev\";\n\n    if(blacklistFlag.length == 0){\n      const url =  `${baseUrl}/joke/${category}?type=${type}`;\n      return this.http.get<JokeParam>(url);\n    } else {\n      const bFlag = blacklistFlag.join(\",\");\n      const url = `${baseUrl}/joke/${category}?blacklistFlag=${bFlag}&type=${type}`;\n      return this.http.get<JokeParam>(url);\n    }\n\n}\n\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}