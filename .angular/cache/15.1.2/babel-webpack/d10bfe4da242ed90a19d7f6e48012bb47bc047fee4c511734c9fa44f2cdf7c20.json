{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { of, ReplaySubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../storage/storage.service\";\nexport class LinkService {\n  constructor(storageService) {\n    this.storageService = storageService;\n    this.linkDetail = {\n      category: 'programming',\n      blacklistFlag: ['nsfw'],\n      type: 'single'\n    };\n    this.privateLinks = [{\n      category: \"Programming\",\n      blacklistFlag: [\"nsfw\"],\n      type: \"single\"\n    }];\n    this.privateLinksSubject = new ReplaySubject(1);\n    this.link1 = {\n      category: \"\",\n      blacklistFlag: [],\n      type: \"\"\n    };\n    this._links$ = [];\n    this.storageService.getData('links').then(links => {\n      if (!links) {\n        links = this.privateLinks;\n      }\n      this.privateLinksSubject.next(links);\n    });\n  }\n  get links$() {\n    return this.privateLinksSubject.asObservable();\n  }\n  saveLinks(category, blacklistFlag, type) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.link1 = {\n        category: category,\n        blacklistFlag: blacklistFlag,\n        type: type\n      };\n      this._links$.push(of(this.link1));\n      yield this.storageService.saveData('links', this._links$);\n      this.privateLinksSubject.next(this._links$);\n    });\n  }\n}\nLinkService.ɵfac = function LinkService_Factory(t) {\n  return new (t || LinkService)(i0.ɵɵinject(i1.StorageService));\n};\nLinkService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LinkService,\n  factory: LinkService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAAoBA,EAAE,EAAEC,aAAa,QAAO,MAAM;;;AAalD,OAAM,MAAOC,WAAW;EAkBtBC,YACUC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAjBxB,eAAU,GAAS;MACjBC,QAAQ,EAAE,aAAa;MACvBC,aAAa,EAAE,CAAC,MAAM,CAAC;MACvBC,IAAI,EAAE;KACP;IAEO,iBAAY,GAAW,CAAC;MAC9BF,QAAQ,EAAE,aAAa;MACvBC,aAAa,EAAE,CAAC,MAAM,CAAC;MACvBC,IAAI,EAAE;KACP,CAAC;IAEM,wBAAmB,GAAG,IAAIN,aAAa,CAAS,CAAC,CAAC;IAE1D,UAAK,GAAO;MAACI,QAAQ,EAAE,EAAE;MAAEC,aAAa,EAAE,EAAE;MAACC,IAAI,EAAE;IAAE,CAAC;IACtD,YAAO,GAAW,EAAE;IAIlB,IAAI,CAACH,cAAc,CAACI,OAAO,CAAC,OAAO,CAAC,CAACC,IAAI,CAACC,KAAK,IAAG;MAChD,IAAI,CAACA,KAAK,EAAE;QACVA,KAAK,GAAG,IAAI,CAACC,YAAY;;MAE3B,IAAI,CAACC,mBAAmB,CAACC,IAAI,CAACH,KAAK,CAAC;IACtC,CAAC,CAAC;EACJ;EAEA,IAAII,MAAM;IACR,OAAO,IAAI,CAACF,mBAAmB,CAACG,YAAY,EAAE;EAChD;EAEMC,SAAS,CAACX,QAAgB,EAAEC,aAAuB,EAAEC,IAAW;;MAGpE,IAAI,CAACU,KAAK,GAAG;QAACZ,QAAQ,EAAEA,QAAQ;QAAEC,aAAa,EAACA,aAAa;QAACC,IAAI,EAAEA;MAAI,CAAC;MACzE,IAAI,CAACW,OAAO,CAACC,IAAI,CAACnB,EAAE,CAAC,IAAI,CAACiB,KAAK,CAAC,CAAC;MACjC,MAAM,IAAI,CAACb,cAAc,CAACgB,QAAQ,CAAC,OAAO,EAAE,IAAI,CAACF,OAAO,CAAC;MACzD,IAAI,CAACN,mBAAmB,CAACC,IAAI,CAAC,IAAI,CAACK,OAAO,CAAC;IAC7C,CAAC;;;;mBAxCUhB,WAAW;AAAA;;SAAXA,WAAW;EAAAmB,SAAXnB,WAAW;EAAAoB,YAFV;AAAM","names":["of","ReplaySubject","LinkService","constructor","storageService","category","blacklistFlag","type","getData","then","links","privateLinks","privateLinksSubject","next","links$","asObservable","saveLinks","link1","_links$","push","saveData","factory","providedIn"],"sourceRoot":"","sources":["D:\\ap-5-pm-zaruba\\src\\app\\services\\link\\link.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Observable, of, ReplaySubject} from \"rxjs\";\nimport {StorageService} from \"../storage/storage.service\";\n\nexport interface Link {\n  category: string;\n  blacklistFlag: string[];\n  type: string;\n\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LinkService {\n\n  linkDetail: Link = {\n    category: 'programming',\n    blacklistFlag: ['nsfw'],\n    type: 'single'\n  }\n\n  private privateLinks: Link[] = [{\n    category: \"Programming\",\n    blacklistFlag: [\"nsfw\"],\n    type: \"single\"\n  }];\n\n  private privateLinksSubject = new ReplaySubject<Link[]>(1);\n\n  link1: Link={category: \"\", blacklistFlag: [],type: \"\"}\n  _links$: Link[] = [];\n  constructor(\n    private storageService: StorageService\n  ) {\n    this.storageService.getData('links').then(links => {\n      if (!links) {\n        links = this.privateLinks;\n      }\n      this.privateLinksSubject.next(links);\n    })\n  }\n\n  get links$() {\n    return this.privateLinksSubject.asObservable();\n  }\n\n  async saveLinks(category: string, blacklistFlag: string[], type:string){\n\n\n    this.link1 = {category: category, blacklistFlag:blacklistFlag,type: type}\n    this._links$.push(of(this.link1));\n    await this.storageService.saveData('links', this._links$);\n    this.privateLinksSubject.next(this._links$);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}