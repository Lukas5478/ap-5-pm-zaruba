{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ReplaySubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../storage/storage.service\";\nexport let LinkService = /*#__PURE__*/(() => {\n  class LinkService {\n    constructor(storageService) {\n      this.storageService = storageService;\n      this.linkDetail = {\n        category: 'programming',\n        blacklistFlag: ['nsfw'],\n        type: 'single'\n      };\n      this.privateLinks = [];\n      this.privateLinksSubject = new ReplaySubject(1);\n      this.link1 = {\n        category: \"\",\n        blacklistFlag: [],\n        type: \"\"\n      };\n      this._links$ = [];\n      this.storageService.getData('links').then(links => {\n        if (!links) {\n          links = this.privateLinks;\n        }\n        this.privateLinksSubject.next(links);\n      });\n      this.links$.subscribe(links => {\n        this._links$ = links;\n      });\n    }\n    get links$() {\n      return this.privateLinksSubject.asObservable();\n    }\n    saveLinks(category, blacklistFlag, type) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.link1 = {\n          category: category,\n          blacklistFlag: blacklistFlag,\n          type: type\n        };\n        this._links$.unshift(this.link1);\n        yield this.storageService.saveData('links', this._links$);\n        this.privateLinksSubject.next(this._links$);\n      });\n    }\n    removeLink(index) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this._links$.splice(index, 1);\n        yield this.storageService.saveData('links', this._links$);\n        this.privateLinksSubject.next(this._links$);\n      });\n    }\n  }\n  LinkService.ɵfac = function LinkService_Factory(t) {\n    return new (t || LinkService)(i0.ɵɵinject(i1.StorageService));\n  };\n  LinkService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LinkService,\n    factory: LinkService.ɵfac,\n    providedIn: 'root'\n  });\n  return LinkService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}