{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ReplaySubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../storage/storage.service\";\nexport class LinkService {\n  constructor(storageService) {\n    this.storageService = storageService;\n    this.linkDetail = {\n      category: 'programming',\n      blacklistFlag: ['nsfw'],\n      type: 'single'\n    };\n    this.privateLinks = [];\n    this.privateLinksSubject = new ReplaySubject(1);\n    this.storageService.getData('links').then(links => {\n      if (!links) {\n        links = this.privateLinks;\n      }\n      this.privateLinksSubject.next(links);\n    });\n  }\n  get places$() {\n    return this.privateLinksSubject.asObservable();\n  }\n  awmlkdlwa(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.storageService.saveData('places', this.privatePlaces);\n      this.privatePlacesSubject.next(this.privatePlaces);\n    });\n  }\n}\nLinkService.ɵfac = function LinkService_Factory(t) {\n  return new (t || LinkService)(i0.ɵɵinject(i1.StorageService));\n};\nLinkService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LinkService,\n  factory: LinkService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAAQA,aAAa,QAAO,MAAM;;;AAalC,OAAM,MAAOC,WAAW;EAYtBC,YACUC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAXxB,eAAU,GAAS;MACjBC,QAAQ,EAAE,aAAa;MACvBC,aAAa,EAAE,CAAC,MAAM,CAAC;MACvBC,IAAI,EAAE;KACT;IAES,iBAAY,GAAW,EAAE;IAEzB,wBAAmB,GAAG,IAAIN,aAAa,CAAS,CAAC,CAAC;IAKxD,IAAI,CAACG,cAAc,CAACI,OAAO,CAAC,OAAO,CAAC,CAACC,IAAI,CAACC,KAAK,IAAG;MAChD,IAAG,CAACA,KAAK,EAAC;QACRA,KAAK,GAAG,IAAI,CAACC,YAAY;;MAE3B,IAAI,CAACC,mBAAmB,CAACC,IAAI,CAACH,KAAK,CAAC;IACtC,CAAC,CAAC;EACJ;EAEA,IAAII,OAAO;IACT,OAAO,IAAI,CAACF,mBAAmB,CAACG,YAAY,EAAE;EAChD;EAEMC,SAAS,CAACC,IAAQ;;MACtB,MAAM,IAAI,CAACb,cAAc,CAACc,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAACC,aAAa,CAAC;MAChE,IAAI,CAACC,oBAAoB,CAACP,IAAI,CAAC,IAAI,CAACM,aAAa,CAAC;IACpD,CAAC;;;;mBA9BUjB,WAAW;AAAA;;SAAXA,WAAW;EAAAmB,SAAXnB,WAAW;EAAAoB,YAFV;AAAM","names":["ReplaySubject","LinkService","constructor","storageService","category","blacklistFlag","type","getData","then","links","privateLinks","privateLinksSubject","next","places$","asObservable","awmlkdlwa","data","saveData","privatePlaces","privatePlacesSubject","factory","providedIn"],"sourceRoot":"","sources":["D:\\ap-5-pm-zaruba\\src\\app\\services\\link\\link.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {ReplaySubject} from \"rxjs\";\nimport {StorageService} from \"../storage/storage.service\";\n\nexport interface Link{\n  category: string;\n  blacklistFlag: string[];\n  type: string;\n\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LinkService {\n\n  linkDetail: Link = {\n    category: 'programming',\n    blacklistFlag: ['nsfw'],\n    type: 'single'\n}\n\n  private privateLinks: Link[] = [];\n\n  private privateLinksSubject = new ReplaySubject<Link[]>(1);\n\n  constructor(\n    private storageService: StorageService\n  ) {\n    this.storageService.getData('links').then(links =>{\n      if(!links){\n        links = this.privateLinks;\n      }\n      this.privateLinksSubject.next(links);\n    })\n  }\n\n  get places$(){\n    return this.privateLinksSubject.asObservable();\n  }\n\n  async awmlkdlwa(data:any){\n    await this.storageService.saveData('places', this.privatePlaces);\n    this.privatePlacesSubject.next(this.privatePlaces);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}